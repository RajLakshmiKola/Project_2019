# -*- coding: utf-8 -*-
"""Malware Detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s3iMPtv2tNh5AvXFHF0p1bmMloAGNYkO
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount("/content/gdrive")

df=pd.read_csv("/content/gdrive/MyDrive/Malware dataset (1).csv")

df.head()

df.shape

df.isnull().sum()

df=df.dropna(how="any",axis=0)
df.head()

df['classification'] = df.classification.map({'benign':0, 'malware':1})



y = df['classification']

y.head()

x=df.drop(["hash","classification",'vm_truncate_count','shared_vm','exec_vm','nvcsw','maj_flt','utime'],axis=1)
x.head()

x = df.loc[:,['state']].values

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range = (0, 1))
train_scaled = scaler.fit_transform(x)
train_scaled

plt.plot(train_scaled)

X_train = []
y_train = []
timesteps = 50

for i in range(timesteps, 1250):
    X_train.append(train_scaled[i - timesteps:i, 0])
    y_train.append(train_scaled[i, 0])
    
X_train, y_train = np.array(X_train), np.array(y_train)

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_squared_error

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=43)

from sklearn.ensemble import GradientBoostingClassifier

model=GradientBoostingClassifier()

model.fit(x_train,y_train)

prediction = model.predict(x_test)

model.score(x_test,prediction)

from sklearn.metrics import accuracy_score, r2_score

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier()

rf.fit(x_train,y_train)

predict = rf.predict(x_test)

predict

rf.score(x_test,y_test)

"""## **MLP**"""

from sklearn.neural_network import MLPClassifier

NN = MLPClassifier((9,), max_iter=5500,activation='relu')
NN.fit(x_train,y_train)

predict = NN.predict(x_test)

NN.score(x_test,predict)

"""# **RNN**"""

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import SimpleRNN
from keras.layers import Dropout

regressor = Sequential()

regressor = Sequential()

regressor.add(SimpleRNN(units = 50, activation='tanh', return_sequences=True, input_shape= (X_train.shape[1],1)))
regressor.add(Dropout(0.2))

regressor.add(SimpleRNN(units = 50, activation='tanh', return_sequences=True))
regressor.add(Dropout(0.2))

regressor.add(SimpleRNN(units = 50, activation='tanh', return_sequences=True))
regressor.add(Dropout(0.2))


regressor.add(SimpleRNN(units = 50))
regressor.add(Dropout(0.2))


regressor.add(Dense(units = 1))


regressor.compile(optimizer='adam', loss='mean_squared_error')

regressor.fit(X_train, y_train)

"""# **LSTM**"""

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM

regressor = Sequential()

regressor.add(LSTM(units = 8, activation = 'relu', input_shape = (None, 1)))

regressor.add(Dense(units = 1))

regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

regressor.score(x_test,y_test)

